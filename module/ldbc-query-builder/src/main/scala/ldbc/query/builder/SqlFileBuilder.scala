/** This file is part of the ldbc. For the full copyright and license information, please view the LICENSE file that was
  * distributed with this source code.
  */

package ldbc.query.builder

import java.io.File
import java.nio.file.Files
import java.time.LocalDateTime

import scala.io.Codec

import ldbc.core.Database

/** Object to generate sql files that write out Create statements for databases and tables.
  */
object SqlFileBuilder:

  private def build(
    output:   String,
    fileName: Option[String],
    database: Database,
  ): Unit =

    val tableQueryBuilder: Set[TableQueryBuilder] = database.tables.map(TableQueryBuilder(_))

    val queryString: String =
      s"""/** This file is automatically generated by ldbc based on the source code.
         |  * This file cannot be modified manually. Instead, modify the database and table settings in the source code.
         |  *
         |  * Generated at ${ LocalDateTime.now().toString }
         |  */
         |
         |CREATE DATABASE `${ database.name }`${ database.characterSet.map(v => s" ${ v.queryString }").getOrElse("") };
         |
         |
         |USE `${ database.name }`;
         |
         |${ tableQueryBuilder.map(_.querySting).mkString("\n") }
         |""".stripMargin

    val outputFile = new File(output, s"${ fileName.getOrElse(database.name) }.sql")

    if !outputFile.exists() then
      outputFile.getParentFile.mkdirs()
      outputFile.createNewFile()

    Files.write(outputFile.toPath, queryString.getBytes(summon[Codec].name))

  def build(output: String, database: Database): Unit = build(output, None, database)
  def build(output: String, fileName: String, database: Database): Unit =
    build(output, Some(fileName), database)
